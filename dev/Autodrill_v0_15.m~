%Autodrill v0.1.5 - matlab class controlling sutter controllers (MP285). NI DAQ I/O
%unit (USB 6009)
%Dan Morozoff - 11/16/14
%This version maintains an in sync in out signal/read generator
classdef Autodrill_v0_15

    properties
    %Channel
    in_out_s;
    %COM PORTS
    sutter_port = 'COM5';
    ardui_port = 'COM9';
    %Channels
    signal_inputChannel = 'ai0';
    signal_outputChannel = 'ao1';
    
    %Settings for session
    rate = 16000; %Set to 16 KHz 
    %Number of cyles to probe fxn
    pulse_cycles = 0;
    %Arduino device to control BK PRECISION power unit. These vary in
    %their max current outputs. We used 1902 (15A)
    ardui;
    voltage_reg_pin = 5;%Pin to adjust voltage
    current_reg_pin = 9;%Pin to adjust current max.
    %Sutter device
    sutter;
    z_step_size = 50; %in micrometers
    % Sutter scaling factor
    %scales to the device r from mm to micrometers
    scaling_factor = 1000;
    %Path storage
    path; %[x y z ang]
    path_r;
    %Milling
    spline_obj;
    spline_pnts;
    
    %Fourier filter
    %Frequencies that will be displayed/potentially measured to
    %boost speed.
    freq_top = 120;
    freq_bot = 80;
    end
    
    methods (Access = public)
        %%Constructor...
        function obj = Autodrill_v0_15
            %add libraries to path
            addpath('dependencies');
            addpath('dependencies/Sutter MP285');
            addpath('dependencies/ArduinoIO');
            
            %Initialize Arduino IO
%             try
%                 obj.ardui = arduino(obj.ardui_port);
%                 obj.ardui.pinMode(obj.voltage_reg_pin,'output');
%                 obj.ardui.pinMode(obj.current_reg_pin,'output');
%             catch err
%                 delete(instrfind({'Port'},{obj.ardui_port}));
%             end
            %Initialize Sutter
%             try
%            
%             obj.sutter = sutterMP285(obj.sutter_port);
%                 moveTo(obj.sutter,[0 0 0]);
%             catch err
%               delete(instrfind({'Port'},{obj.sutter_port}));
%             end

            %Initialize DAQ
            daq_devices = daq.getDevices;
            device= daq_devices(1).ID;
            %only ao0 and ao1 are outputs on the USB6008/6009 boards.
            
            %Create NI-DAQ session object and set the in/out channels
            %!!!Still need to queue data for out channel
            obj.in_out_s.Rate = obj.rate;
            obj.in_out_s= daq.createSession('ni');
            obj.in_out_s.addAnalogInputChannel(device,obj.signal_outputChannel,'Voltage');
            obj.in_out_s.addAnalogOutputChannel(device,obj.signal_inputChannel,'Voltage');
            
            
            %Initialize the MP 285 device -- this opens the serial object now
            %stored in sutter which extends the serial class.
%              sutter=sutterMP285(dev_loc);
%              sutter.verbose=1;
        end
        %% Primary control loop 
        function obj=control_loop(obj,d,distance_between_pnts)
            obj.setDrillVelocity(400) %in micrometers/s
            obj.resetToOrigin();
            obj.path = [];
            r = d/2;
            obj.path_r = r;

            %Add a step_size that is proportional to the linead distance between
            %hole centers
            radial_step_size = 2*asin(distance_between_pnts/(2*r));
            figure;
            hold on;
            plot3(0,0,0,'gx','MarkerSize',50);    
            grid on;
            drawnow
            
            obj.setDrillVelocity(40);
            
            t0 = tic;
            for ang=0:radial_step_size:2*pi
                z_start= -4 ; %This can be modififed in order to evaluate how to detect the surface of the bone
%                   z =randi([-2 -1],1,1);
%                 Scale to the device
               [x,y] = obj.convertRadialToXY(ang);
                z = obj.scaling_factor*z_start;
                
             
               if(ang<2*pi)
                   cprintf([0 1 0],'Move To %g %g %g um...\n',x ,y ,z);
                   moveTo(obj.sutter,[x y z]);

                   plot3(x/obj.scaling_factor,y/obj.scaling_factor,-1*z/obj.scaling_factor,'r.','MarkerSize',30);   
                   drawnow 
                   
                   %Drill
                   [pierced,pierced_z]= obj.stepDrillZ(x, y, z);
                    plot3(x/obj.scaling_factor,y/obj.scaling_factor,-1*pierced_z/obj.scaling_factor,'b.','MarkerSize',20);    
                    drawnow;
               end
                        
                if(abs(x)<(10^-6)) x = 0;end
                if(abs(y)<(10^-6)) y = 0;end    
                cprintf([0 1 .5], 'STORING PATH: %d %d %d \n', x,y,pierced_z);
                
                if(ang==2*pi)
                    obj.path = [obj.path; x y  obj.path(1,3) ang];
                else
                    obj.path = [obj.path; x y  pierced_z ang];
                end
                
                %Retract drill prior to move
                moveTo(obj.sutter,[x,y,z]);
                
            end
            toc(t0);
            cprintf([1 0 0],'Path: %d \n', obj.path);
            
            %Interpolate and retrace
            obj=obj.splineInterpolateZDrill;
%             obj=obj.splineInterpolateZDrill_2;
            
            %Mill the interpolated values.
            obj.mill();
            
            obj.resetToOrigin();
            disp(obj.path)
        end
        %% Drill functions
        %Drill on or off/ voltage/current
        function obj = drillControl(obj,state,voltage,current)
            if(strcmp(state,'on'))
                    obj.setDrillCurrent(current);
                    obj.setDrillVoltage(voltage);
            else
                    obj.setDrillCurrent(0);
                    obj.setDrillVoltage(0);
            end
        end
        %Milling mode of the drill
        function mill(obj)
            %pull back drill 
            x0= obj.spline_pnts(1,1);
            y0 = obj.spline_pnts(1,2);
            moveTo(obj.sutter,[x0 y0 -5000]);
            %turn drill on -- set speed (adjusted empirically)
            obj.drillControl('on',25,2);
            %Begin milling move.
           for(i=1:1:length(obj.spline_pnts))
                x= obj.spline_pnts(i,1);
                y = obj.spline_pnts(i,2);
                z = obj.spline_pnts(i,3);
                moveTo(obj.sutter,[x y z]);
                hold on;
                plot3(x/1000,y/1000,-1*z/1000,'c.','MarkerSize',5);
                drawnow;
           end
           obj.drillControl('off',0,0);
        end
        %Interpolation functions for the drill milling mode
        function obj = splineInterpolateZDrill(obj)
            path_to_user = obj.path(1:(end),1:3)';
            cprintf([1 0 0 ], 'Interpolating...');
            path_to_user

            sp = cscvn(path_to_user(:,[1:end 1]));
            obj.spline_obj = sp;
            %Points for the spline fit
            points=fnplt(sp);
            obj.spline_pnts = points'; %transpose them in order to keep the same sorting style...
        end
        function obj = splineInterpolateZDrill_2(obj)
            cprintf([1 0 0 ], 'Interpolating...');
            for(i=1:1:length(obj.path))
                if(i<length(obj.path))
                    path_to_user = obj.path(i:i+1,1:3)';
                    
                    cprintf([1 0 0 ],'spline btwn:\n');
                        path_to_user
                    
                    sp = cscvn(path_to_user(:,[1:end 1]));
%                   Store spline if need be later...
%                     obj.spline_obj = sp;
                    %Points for the spline fit
                    points=fnplt(sp);
                    obj.spline_pnts = [obj.spline_pnts; points'];
                end
            end
        end
        %Step drill in z to do depth holes 
        function [pierced,curZ] = stepDrillZ(obj,x_in,y_in,z_in)
            pierced = 0;
            cnt = 0;
            obj.drillControl('on',25,2);
            while(~pierced)
                curZ = (z_in+(obj.z_step_size)*cnt);
                fprintf(1,'Drilling to depth:  %d um \n',curZ);
                moveTo(obj.sutter,[x_in y_in curZ]); 
               
                if(curZ>=1000* 3.2)
                    obj.drillControl('off',0,0);
                    pierced = 1;
                end
                cnt = cnt+1;
                !!!THIS IS WHERE THE MAIN MEASUREMENT IN THE LOOP SHOULD OCCUR!!!
%                 %mesaure Signal
%                 if(met)
%                     pierced = 1;
%                 else 
% 
%                 end
            end
            cprintf([1 .5 0],'***Pierced @ %d *** \n', curZ);
        end
        %Currently max voltage is 25V, but I measured it to 32V.
        % the calibration factor for voltage and current require them to be
        % set to the powersupply maxes.
        function setDrillVoltage(obj,vIn)
            if(vIn>25)
                vIn = 25;
            end
            %convert to arduino scale
            vToSet = int8(vIn*255/60);
            fprintf('Drill voltage set to %d \n',vIn);
            obj.ardui.analogWrite(obj.voltage_reg_pin,vToSet);
        end
        %%The fuse on the foredom is at 3.1A, but the max draw is 2A
        function setDrillCurrent(obj,iIn)
            if(iIn>2)
                iIn = 2;
            end
            iToSet = int8(iIn*255/15);
            fprintf('Drill current set to %d \n',iToSet);
            obj.ardui.analogWrite(obj.current_reg_pin,iToSet);
        end
        %More basic functionality of SutterMP285
        function resetToOrigin(obj)
            moveTo(obj.sutter,[0 0 0]);
        end
        %Since it makes more sense to set a velocity based on um/sec...
        function setDrillVelocity(obj,vel)
            [stepMult, ~,~] = getStatus(obj.sutter);
            velToSet = vel* stepMult; % the first unit is the multiplier.
            %The scale factor simply multiplies the speed -  so I set it to 1 
            
            setVelocity(obj.sutter,velToSet,1);
            getStatus(obj.sutter);
        end
        %% NI-DAQ in/out functionality
        %This prepares the output buffer to send the signal it does note
        %execute it.
        function queueSignal(obj,fxn, frequency)
            x = linspace(0,2*pi,1000); %final is the number of points and should match the sampling rate
            if(isempty(frequency)) 
                frequency = obj.rate;
            end
            if strcmp(fxn,'sine')
                fxn = 2.5*sin(frequency*x)+2.5;
            end
            
            obj.in_out_s.queueOutputData(
            
        end
    end
    
    
end
